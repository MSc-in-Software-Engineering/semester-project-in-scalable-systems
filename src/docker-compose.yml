version: "3"

services:
  ### Kafka
  kafka:
    image: docker.io/bitnami/kafka:3.5
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

  ### HDFS
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop2.7.4-java8
    volumes:
      - namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop-hive.env
    ports:
      - "50070:50070"

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop2.7.4-java8
    volumes:
      - datanode:/hadoop/dfs/data
    env_file:
      - ./hadoop-hive.env
    environment:
      SERVICE_PRECONDITION: "namenode:50070"
    ports:
      - "50075:50075"

  ### Hive
  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    env_file:
      - ./hadoop-hive.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    ports:
      - "10000:10000"

  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    env_file:
      - ./hadoop-hive.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:50070 datanode:50075 hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"

  ### Superset
  superset:
    image: apache/superset:2.1.0
    container_name: superset
    environment:
      - SUPERSET_CONFIG_PATH=/etc/superset/superset_config.py
    volumes:
      - ./superset_config.py:/etc/superset/superset_config.py
    ports:
      - "8088:8088"
    depends_on:
      - namenode
      - datanode
      - hive-server
      - hive-metastore

  ### Spark
  spark-master:
    image: docker.io/bitnami/spark:3.3
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - KAFKA_BROKER_ADDRESS=kafka:9092
    ports:
      - '8080:8080'

  spark-worker:
    image: docker.io/bitnami/spark:3.3
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2GN
      - SPARK_WORKER_CORES=1
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ECRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no

  jupyterlab:
    image: jupyter/all-spark-notebook
    ports:
      - 8888:8888
    volumes:
      - shared-workspace:/opt/workspace
      - ./local/notebooks:/opt/workspace/notebooks
    command: "start-notebook.sh --NotebookApp.token='' --NotebookApp.password=''"

  ### Producers
  energinet-co2-producer:
    build: 
      context: ./kafka/producers/energinet
      dockerfile: Dockerfile
    environment:
      - KAFKA_BROKER_ADDRESS=kafka
    depends_on:
      - kafka

  greenhouse-producer:
    build: 
      context: ./kafka/producers/greenhouse_gas_emissions
      dockerfile: Dockerfile
    environment:
      - KAFKA_BROKER_ADDRESS=kafka
    depends_on:
      - kafka

  ### Consumers
  energinet-co2-consumer:
    build: 
      context: ./kafka/consumers/energinet
      dockerfile: Dockerfile
    environment:
      - KAFKA_BROKER_ADDRESS=kafka
    depends_on:
      - kafka

  greenhouse-consumer:
    build: 
      context: ./kafka/consumers/greenhouse_gas_emissions
      dockerfile: Dockerfile
    environment:
      - KAFKA_BROKER_ADDRESS=kafka
    depends_on:
      - kafka
      
volumes:
  namenode:
  datanode:
  kafka_data:
    driver: local
  shared-workspace:
    driver: local